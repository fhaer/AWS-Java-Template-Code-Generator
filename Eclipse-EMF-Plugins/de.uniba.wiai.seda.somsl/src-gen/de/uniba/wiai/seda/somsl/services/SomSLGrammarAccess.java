/*
* generated by Xtext
*/
package de.uniba.wiai.seda.somsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SomSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MetamodellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Metamodell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionIDTerminalRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cObjekttypAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cObjekttypObjekttypParserRuleCall_2_0_0 = (RuleCall)cObjekttypAssignment_2_0.eContents().get(0);
		private final Assignment cBeziehungAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBeziehungBeziehungParserRuleCall_2_1_0 = (RuleCall)cBeziehungAssignment_2_1.eContents().get(0);
		
		//Metamodell:
		//
		//	name=ID version=ID (objekttyp+=Objekttyp | beziehung+=Beziehung)*;
		public ParserRule getRule() { return rule; }

		//name=ID version=ID (objekttyp+=Objekttyp | beziehung+=Beziehung)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//version=ID
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }

		//ID
		public RuleCall getVersionIDTerminalRuleCall_1_0() { return cVersionIDTerminalRuleCall_1_0; }

		//(objekttyp+=Objekttyp | beziehung+=Beziehung)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//objekttyp+=Objekttyp
		public Assignment getObjekttypAssignment_2_0() { return cObjekttypAssignment_2_0; }

		//Objekttyp
		public RuleCall getObjekttypObjekttypParserRuleCall_2_0_0() { return cObjekttypObjekttypParserRuleCall_2_0_0; }

		//beziehung+=Beziehung
		public Assignment getBeziehungAssignment_2_1() { return cBeziehungAssignment_2_1; }

		//Beziehung
		public RuleCall getBeziehungBeziehungParserRuleCall_2_1_0() { return cBeziehungBeziehungParserRuleCall_2_1_0; }
	}

	public class ObjekttypElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Objekttyp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cANNOTATIONTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cKOTParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cVOTParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributeAttributParserRuleCall_4_0 = (RuleCall)cAttributeAssignment_4.eContents().get(0);
		private final Assignment cOperatorenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorenOperatorParserRuleCall_5_0 = (RuleCall)cOperatorenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Objekttyp:
		//
		//	ANNOTATION? (KOT | VOT) name=ID "{" attribute+=Attribut* operatoren+=Operator* "}";
		public ParserRule getRule() { return rule; }

		//ANNOTATION? (KOT | VOT) name=ID "{" attribute+=Attribut* operatoren+=Operator* "}"
		public Group getGroup() { return cGroup; }

		//ANNOTATION?
		public RuleCall getANNOTATIONTerminalRuleCall_0() { return cANNOTATIONTerminalRuleCall_0; }

		//KOT | VOT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//KOT
		public RuleCall getKOTParserRuleCall_1_0() { return cKOTParserRuleCall_1_0; }

		//VOT
		public RuleCall getVOTParserRuleCall_1_1() { return cVOTParserRuleCall_1_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//attribute+=Attribut*
		public Assignment getAttributeAssignment_4() { return cAttributeAssignment_4; }

		//Attribut
		public RuleCall getAttributeAttributParserRuleCall_4_0() { return cAttributeAttributParserRuleCall_4_0; }

		//operatoren+=Operator*
		public Assignment getOperatorenAssignment_5() { return cOperatorenAssignment_5; }

		//Operator
		public RuleCall getOperatorenOperatorParserRuleCall_5_0() { return cOperatorenOperatorParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AttributElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cObjekttypAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cObjekttypObjekttypCrossReference_0_0_0 = (CrossReference)cObjekttypAssignment_0_0.eContents().get(0);
		private final RuleCall cObjekttypObjekttypIDTerminalRuleCall_0_0_0_1 = (RuleCall)cObjekttypObjekttypCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cDTKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cDatentypAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cDatentypIDTerminalRuleCall_0_1_1_0 = (RuleCall)cDatentypAssignment_0_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Attribut:
		//
		//	(objekttyp=[Objekttyp] | "DT" datentyp=ID) name=ID ";";
		public ParserRule getRule() { return rule; }

		//(objekttyp=[Objekttyp] | "DT" datentyp=ID) name=ID ";"
		public Group getGroup() { return cGroup; }

		//objekttyp=[Objekttyp] | "DT" datentyp=ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//objekttyp=[Objekttyp]
		public Assignment getObjekttypAssignment_0_0() { return cObjekttypAssignment_0_0; }

		//[Objekttyp]
		public CrossReference getObjekttypObjekttypCrossReference_0_0_0() { return cObjekttypObjekttypCrossReference_0_0_0; }

		//ID
		public RuleCall getObjekttypObjekttypIDTerminalRuleCall_0_0_0_1() { return cObjekttypObjekttypIDTerminalRuleCall_0_0_0_1; }

		//"DT" datentyp=ID
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"DT"
		public Keyword getDTKeyword_0_1_0() { return cDTKeyword_0_1_0; }

		//datentyp=ID
		public Assignment getDatentypAssignment_0_1_1() { return cDatentypAssignment_0_1_1; }

		//ID
		public RuleCall getDatentypIDTerminalRuleCall_0_1_1_0() { return cDatentypIDTerminalRuleCall_0_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cParameterObjekttypCrossReference_2_0 = (CrossReference)cParameterAssignment_2.eContents().get(0);
		private final RuleCall cParameterObjekttypIDTerminalRuleCall_2_0_1 = (RuleCall)cParameterObjekttypCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisSpaceLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnweisungenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnweisungenAnweisungParserRuleCall_4_0 = (RuleCall)cAnweisungenAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Operator:
		//
		//	name=ID "(" parameter+=[Objekttyp]* ") {" anweisungen+=Anweisung* "}";
		public ParserRule getRule() { return rule; }

		//name=ID "(" parameter+=[Objekttyp]* ") {" anweisungen+=Anweisung* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameter+=[Objekttyp]*
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }

		//[Objekttyp]
		public CrossReference getParameterObjekttypCrossReference_2_0() { return cParameterObjekttypCrossReference_2_0; }

		//ID
		public RuleCall getParameterObjekttypIDTerminalRuleCall_2_0_1() { return cParameterObjekttypIDTerminalRuleCall_2_0_1; }

		//") {"
		public Keyword getRightParenthesisSpaceLeftCurlyBracketKeyword_3() { return cRightParenthesisSpaceLeftCurlyBracketKeyword_3; }

		//anweisungen+=Anweisung*
		public Assignment getAnweisungenAssignment_4() { return cAnweisungenAssignment_4; }

		//Anweisung
		public RuleCall getAnweisungenAnweisungParserRuleCall_4_0() { return cAnweisungenAnweisungParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AnweisungElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Anweisung");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cKontrollstrukturAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKontrollstrukturIDTerminalRuleCall_0_0_0 = (RuleCall)cKontrollstrukturAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cBedingungAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cBedingungAnweisungParserRuleCall_0_2_0 = (RuleCall)cBedingungAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisSpaceLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cBedigteAnweisungenAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cBedigteAnweisungenAnweisungParserRuleCall_0_4_0 = (RuleCall)cBedigteAnweisungenAssignment_0_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cObjektAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cObjektObjekttypCrossReference_1_0_0_0 = (CrossReference)cObjektAssignment_1_0_0.eContents().get(0);
		private final RuleCall cObjektObjekttypIDTerminalRuleCall_1_0_0_0_1 = (RuleCall)cObjektObjekttypCrossReference_1_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorIDTerminalRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		
		//Anweisung:
		//
		//	kontrollstruktur=ID "(" bedingung=Anweisung ") {" bedigteAnweisungen+=Anweisung* "}" | (objekt=[Objekttyp] ".")?
		//
		//	operator=ID;
		public ParserRule getRule() { return rule; }

		//kontrollstruktur=ID "(" bedingung=Anweisung ") {" bedigteAnweisungen+=Anweisung* "}" | (objekt=[Objekttyp] ".")?
		//
		//operator=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//kontrollstruktur=ID "(" bedingung=Anweisung ") {" bedigteAnweisungen+=Anweisung* "}"
		public Group getGroup_0() { return cGroup_0; }

		//kontrollstruktur=ID
		public Assignment getKontrollstrukturAssignment_0_0() { return cKontrollstrukturAssignment_0_0; }

		//ID
		public RuleCall getKontrollstrukturIDTerminalRuleCall_0_0_0() { return cKontrollstrukturIDTerminalRuleCall_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//bedingung=Anweisung
		public Assignment getBedingungAssignment_0_2() { return cBedingungAssignment_0_2; }

		//Anweisung
		public RuleCall getBedingungAnweisungParserRuleCall_0_2_0() { return cBedingungAnweisungParserRuleCall_0_2_0; }

		//") {"
		public Keyword getRightParenthesisSpaceLeftCurlyBracketKeyword_0_3() { return cRightParenthesisSpaceLeftCurlyBracketKeyword_0_3; }

		//bedigteAnweisungen+=Anweisung*
		public Assignment getBedigteAnweisungenAssignment_0_4() { return cBedigteAnweisungenAssignment_0_4; }

		//Anweisung
		public RuleCall getBedigteAnweisungenAnweisungParserRuleCall_0_4_0() { return cBedigteAnweisungenAnweisungParserRuleCall_0_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_5() { return cRightCurlyBracketKeyword_0_5; }

		//(objekt=[Objekttyp] ".")? operator=ID
		public Group getGroup_1() { return cGroup_1; }

		//(objekt=[Objekttyp] ".")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//objekt=[Objekttyp]
		public Assignment getObjektAssignment_1_0_0() { return cObjektAssignment_1_0_0; }

		//[Objekttyp]
		public CrossReference getObjektObjekttypCrossReference_1_0_0_0() { return cObjektObjekttypCrossReference_1_0_0_0; }

		//ID
		public RuleCall getObjektObjekttypIDTerminalRuleCall_1_0_0_0_1() { return cObjektObjekttypIDTerminalRuleCall_1_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//operator=ID
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//ID
		public RuleCall getOperatorIDTerminalRuleCall_1_1_0() { return cOperatorIDTerminalRuleCall_1_1_0; }
	}

	public class KOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KOT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOOTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLOTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTOTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//KOT:
		//
		//	OOT | LOT | TOT;
		public ParserRule getRule() { return rule; }

		//OOT | LOT | TOT
		public Alternatives getAlternatives() { return cAlternatives; }

		//OOT
		public RuleCall getOOTParserRuleCall_0() { return cOOTParserRuleCall_0; }

		//LOT
		public RuleCall getLOTParserRuleCall_1() { return cLOTParserRuleCall_1; }

		//TOT
		public RuleCall getTOTParserRuleCall_2() { return cTOTParserRuleCall_2; }
	}

	public class VOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cVOTAction_1 = (Action)cGroup.eContents().get(1);
		
		//VOT:
		//
		//	"VOT" {VOT};
		public ParserRule getRule() { return rule; }

		//"VOT" {VOT}
		public Group getGroup() { return cGroup; }

		//"VOT"
		public Keyword getVOTKeyword_0() { return cVOTKeyword_0; }

		//{VOT}
		public Action getVOTAction_1() { return cVOTAction_1; }
	}

	public class OOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cOOTAction_1 = (Action)cGroup.eContents().get(1);
		
		//OOT:
		//
		//	"OOT" {OOT};
		public ParserRule getRule() { return rule; }

		//"OOT" {OOT}
		public Group getGroup() { return cGroup; }

		//"OOT"
		public Keyword getOOTKeyword_0() { return cOOTKeyword_0; }

		//{OOT}
		public Action getOOTAction_1() { return cOOTAction_1; }
	}

	public class LOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLOTAction_1 = (Action)cGroup.eContents().get(1);
		
		//LOT:
		//
		//	"LOT" {LOT};
		public ParserRule getRule() { return rule; }

		//"LOT" {LOT}
		public Group getGroup() { return cGroup; }

		//"LOT"
		public Keyword getLOTKeyword_0() { return cLOTKeyword_0; }

		//{LOT}
		public Action getLOTAction_1() { return cLOTAction_1; }
	}

	public class TOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTOTAction_1 = (Action)cGroup.eContents().get(1);
		
		//TOT:
		//
		//	"TOT" {TOT};
		public ParserRule getRule() { return rule; }

		//"TOT" {TOT}
		public Group getGroup() { return cGroup; }

		//"TOT"
		public Keyword getTOTKeyword_0() { return cTOTKeyword_0; }

		//{TOT}
		public Action getTOTAction_1() { return cTOTAction_1; }
	}

	public class BeziehungElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Beziehung");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cANNOTATIONTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIs_aParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cInteracts_withParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cIs_part_ofParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//Beziehung:
		//
		//	ANNOTATION? (Is_a | Interacts_with | Is_part_of);
		public ParserRule getRule() { return rule; }

		//ANNOTATION? (Is_a | Interacts_with | Is_part_of)
		public Group getGroup() { return cGroup; }

		//ANNOTATION?
		public RuleCall getANNOTATIONTerminalRuleCall_0() { return cANNOTATIONTerminalRuleCall_0; }

		//Is_a | Interacts_with | Is_part_of
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//Is_a
		public RuleCall getIs_aParserRuleCall_1_0() { return cIs_aParserRuleCall_1_0; }

		//Interacts_with
		public RuleCall getInteracts_withParserRuleCall_1_1() { return cInteracts_withParserRuleCall_1_1; }

		//Is_part_of
		public RuleCall getIs_part_ofParserRuleCall_1_2() { return cIs_part_ofParserRuleCall_1_2; }
	}

	public class Interacts_withElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interacts_with");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInteracts_withKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjekttyp1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjekttyp1ObjekttypCrossReference_1_0 = (CrossReference)cObjekttyp1Assignment_1.eContents().get(0);
		private final RuleCall cObjekttyp1ObjekttypIDTerminalRuleCall_1_0_1 = (RuleCall)cObjekttyp1ObjekttypCrossReference_1_0.eContents().get(1);
		private final Assignment cKardinalitaetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cKardinalitaetAlternatives_2_0 = (Alternatives)cKardinalitaetAssignment_2.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet01ParserRuleCall_2_0_0 = (RuleCall)cKardinalitaetAlternatives_2_0.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet0xParserRuleCall_2_0_1 = (RuleCall)cKardinalitaetAlternatives_2_0.eContents().get(1);
		private final RuleCall cKardinalitaetKardinalitaet1xParserRuleCall_2_0_2 = (RuleCall)cKardinalitaetAlternatives_2_0.eContents().get(2);
		private final Assignment cObjekttyp2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cObjekttyp2ObjekttypCrossReference_3_0 = (CrossReference)cObjekttyp2Assignment_3.eContents().get(0);
		private final RuleCall cObjekttyp2ObjekttypIDTerminalRuleCall_3_0_1 = (RuleCall)cObjekttyp2ObjekttypCrossReference_3_0.eContents().get(1);
		
		//Interacts_with:
		//
		//	"interacts_with:"? objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x)
		//
		//	objekttyp2=[Objekttyp];
		public ParserRule getRule() { return rule; }

		//"interacts_with:"? objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x)
		//
		//objekttyp2=[Objekttyp]
		public Group getGroup() { return cGroup; }

		//"interacts_with:"?
		public Keyword getInteracts_withKeyword_0() { return cInteracts_withKeyword_0; }

		//objekttyp1=[Objekttyp]
		public Assignment getObjekttyp1Assignment_1() { return cObjekttyp1Assignment_1; }

		//[Objekttyp]
		public CrossReference getObjekttyp1ObjekttypCrossReference_1_0() { return cObjekttyp1ObjekttypCrossReference_1_0; }

		//ID
		public RuleCall getObjekttyp1ObjekttypIDTerminalRuleCall_1_0_1() { return cObjekttyp1ObjekttypIDTerminalRuleCall_1_0_1; }

		//kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x)
		public Assignment getKardinalitaetAssignment_2() { return cKardinalitaetAssignment_2; }

		//Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x
		public Alternatives getKardinalitaetAlternatives_2_0() { return cKardinalitaetAlternatives_2_0; }

		//Kardinalitaet01
		public RuleCall getKardinalitaetKardinalitaet01ParserRuleCall_2_0_0() { return cKardinalitaetKardinalitaet01ParserRuleCall_2_0_0; }

		//Kardinalitaet0x
		public RuleCall getKardinalitaetKardinalitaet0xParserRuleCall_2_0_1() { return cKardinalitaetKardinalitaet0xParserRuleCall_2_0_1; }

		//Kardinalitaet1x
		public RuleCall getKardinalitaetKardinalitaet1xParserRuleCall_2_0_2() { return cKardinalitaetKardinalitaet1xParserRuleCall_2_0_2; }

		//objekttyp2=[Objekttyp]
		public Assignment getObjekttyp2Assignment_3() { return cObjekttyp2Assignment_3; }

		//[Objekttyp]
		public CrossReference getObjekttyp2ObjekttypCrossReference_3_0() { return cObjekttyp2ObjekttypCrossReference_3_0; }

		//ID
		public RuleCall getObjekttyp2ObjekttypIDTerminalRuleCall_3_0_1() { return cObjekttyp2ObjekttypIDTerminalRuleCall_3_0_1; }
	}

	public class Is_aElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Is_a");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIs_aKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjekttyp1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjekttyp1ObjekttypCrossReference_1_0 = (CrossReference)cObjekttyp1Assignment_1.eContents().get(0);
		private final RuleCall cObjekttyp1ObjekttypIDTerminalRuleCall_1_0_1 = (RuleCall)cObjekttyp1ObjekttypCrossReference_1_0.eContents().get(1);
		private final Assignment cKardinalitaetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cKardinalitaetAlternatives_2_0 = (Alternatives)cKardinalitaetAssignment_2.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet01ParserRuleCall_2_0_0 = (RuleCall)cKardinalitaetAlternatives_2_0.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet11ParserRuleCall_2_0_1 = (RuleCall)cKardinalitaetAlternatives_2_0.eContents().get(1);
		private final Assignment cObjekttyp2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cObjekttyp2ObjekttypCrossReference_3_0 = (CrossReference)cObjekttyp2Assignment_3.eContents().get(0);
		private final RuleCall cObjekttyp2ObjekttypIDTerminalRuleCall_3_0_1 = (RuleCall)cObjekttyp2ObjekttypCrossReference_3_0.eContents().get(1);
		
		//Is_a:
		//
		//	"is_a:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet11) objekttyp2=[Objekttyp];
		public ParserRule getRule() { return rule; }

		//"is_a:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet11) objekttyp2=[Objekttyp]
		public Group getGroup() { return cGroup; }

		//"is_a:"
		public Keyword getIs_aKeyword_0() { return cIs_aKeyword_0; }

		//objekttyp1=[Objekttyp]
		public Assignment getObjekttyp1Assignment_1() { return cObjekttyp1Assignment_1; }

		//[Objekttyp]
		public CrossReference getObjekttyp1ObjekttypCrossReference_1_0() { return cObjekttyp1ObjekttypCrossReference_1_0; }

		//ID
		public RuleCall getObjekttyp1ObjekttypIDTerminalRuleCall_1_0_1() { return cObjekttyp1ObjekttypIDTerminalRuleCall_1_0_1; }

		//kardinalitaet=(Kardinalitaet01 | Kardinalitaet11)
		public Assignment getKardinalitaetAssignment_2() { return cKardinalitaetAssignment_2; }

		//Kardinalitaet01 | Kardinalitaet11
		public Alternatives getKardinalitaetAlternatives_2_0() { return cKardinalitaetAlternatives_2_0; }

		//Kardinalitaet01
		public RuleCall getKardinalitaetKardinalitaet01ParserRuleCall_2_0_0() { return cKardinalitaetKardinalitaet01ParserRuleCall_2_0_0; }

		//Kardinalitaet11
		public RuleCall getKardinalitaetKardinalitaet11ParserRuleCall_2_0_1() { return cKardinalitaetKardinalitaet11ParserRuleCall_2_0_1; }

		//objekttyp2=[Objekttyp]
		public Assignment getObjekttyp2Assignment_3() { return cObjekttyp2Assignment_3; }

		//[Objekttyp]
		public CrossReference getObjekttyp2ObjekttypCrossReference_3_0() { return cObjekttyp2ObjekttypCrossReference_3_0; }

		//ID
		public RuleCall getObjekttyp2ObjekttypIDTerminalRuleCall_3_0_1() { return cObjekttyp2ObjekttypIDTerminalRuleCall_3_0_1; }
	}

	public class Is_part_ofElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Is_part_of");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIs_part_ofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjekttyp1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjekttyp1ObjekttypCrossReference_1_0 = (CrossReference)cObjekttyp1Assignment_1.eContents().get(0);
		private final RuleCall cObjekttyp1ObjekttypIDTerminalRuleCall_1_0_1 = (RuleCall)cObjekttyp1ObjekttypCrossReference_1_0.eContents().get(1);
		private final Assignment cKardinalitaetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cKardinalitaetAlternatives_2_0 = (Alternatives)cKardinalitaetAssignment_2.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet01ParserRuleCall_2_0_0 = (RuleCall)cKardinalitaetAlternatives_2_0.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet0xParserRuleCall_2_0_1 = (RuleCall)cKardinalitaetAlternatives_2_0.eContents().get(1);
		private final RuleCall cKardinalitaetKardinalitaet1xParserRuleCall_2_0_2 = (RuleCall)cKardinalitaetAlternatives_2_0.eContents().get(2);
		private final Assignment cObjekttyp2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cObjekttyp2ObjekttypCrossReference_3_0 = (CrossReference)cObjekttyp2Assignment_3.eContents().get(0);
		private final RuleCall cObjekttyp2ObjekttypIDTerminalRuleCall_3_0_1 = (RuleCall)cObjekttyp2ObjekttypCrossReference_3_0.eContents().get(1);
		
		//Is_part_of:
		//
		//	"is_part_of:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x)
		//
		//	objekttyp2=[Objekttyp];
		public ParserRule getRule() { return rule; }

		//"is_part_of:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x)
		//
		//objekttyp2=[Objekttyp]
		public Group getGroup() { return cGroup; }

		//"is_part_of:"
		public Keyword getIs_part_ofKeyword_0() { return cIs_part_ofKeyword_0; }

		//objekttyp1=[Objekttyp]
		public Assignment getObjekttyp1Assignment_1() { return cObjekttyp1Assignment_1; }

		//[Objekttyp]
		public CrossReference getObjekttyp1ObjekttypCrossReference_1_0() { return cObjekttyp1ObjekttypCrossReference_1_0; }

		//ID
		public RuleCall getObjekttyp1ObjekttypIDTerminalRuleCall_1_0_1() { return cObjekttyp1ObjekttypIDTerminalRuleCall_1_0_1; }

		//kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x)
		public Assignment getKardinalitaetAssignment_2() { return cKardinalitaetAssignment_2; }

		//Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x
		public Alternatives getKardinalitaetAlternatives_2_0() { return cKardinalitaetAlternatives_2_0; }

		//Kardinalitaet01
		public RuleCall getKardinalitaetKardinalitaet01ParserRuleCall_2_0_0() { return cKardinalitaetKardinalitaet01ParserRuleCall_2_0_0; }

		//Kardinalitaet0x
		public RuleCall getKardinalitaetKardinalitaet0xParserRuleCall_2_0_1() { return cKardinalitaetKardinalitaet0xParserRuleCall_2_0_1; }

		//Kardinalitaet1x
		public RuleCall getKardinalitaetKardinalitaet1xParserRuleCall_2_0_2() { return cKardinalitaetKardinalitaet1xParserRuleCall_2_0_2; }

		//objekttyp2=[Objekttyp]
		public Assignment getObjekttyp2Assignment_3() { return cObjekttyp2Assignment_3; }

		//[Objekttyp]
		public CrossReference getObjekttyp2ObjekttypCrossReference_3_0() { return cObjekttyp2ObjekttypCrossReference_3_0; }

		//ID
		public RuleCall getObjekttyp2ObjekttypIDTerminalRuleCall_3_0_1() { return cObjekttyp2ObjekttypIDTerminalRuleCall_3_0_1; }
	}

	public class KardinalitaetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kardinalitaet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKardinalitaet01ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKardinalitaet0xParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKardinalitaet11ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cKardinalitaet1xParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Kardinalitaet:
		//
		//	Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet11 | Kardinalitaet1x;
		public ParserRule getRule() { return rule; }

		//Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet11 | Kardinalitaet1x
		public Alternatives getAlternatives() { return cAlternatives; }

		//Kardinalitaet01
		public RuleCall getKardinalitaet01ParserRuleCall_0() { return cKardinalitaet01ParserRuleCall_0; }

		//Kardinalitaet0x
		public RuleCall getKardinalitaet0xParserRuleCall_1() { return cKardinalitaet0xParserRuleCall_1; }

		//Kardinalitaet11
		public RuleCall getKardinalitaet11ParserRuleCall_2() { return cKardinalitaet11ParserRuleCall_2; }

		//Kardinalitaet1x
		public RuleCall getKardinalitaet1xParserRuleCall_3() { return cKardinalitaet1xParserRuleCall_3; }
	}

	public class Kardinalitaet01Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kardinalitaet01");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisDigitZeroCommaDigitOneRightParenthesisKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Action cKardinalitaet01Action_1 = (Action)cGroup.eContents().get(1);
		
		//Kardinalitaet01:
		//
		//	("(0,1)" | "--") {Kardinalitaet01};
		public ParserRule getRule() { return rule; }

		//("(0,1)" | "--") {Kardinalitaet01}
		public Group getGroup() { return cGroup; }

		//"(0,1)" | "--"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"(0,1)"
		public Keyword getLeftParenthesisDigitZeroCommaDigitOneRightParenthesisKeyword_0_0() { return cLeftParenthesisDigitZeroCommaDigitOneRightParenthesisKeyword_0_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_0_1() { return cHyphenMinusHyphenMinusKeyword_0_1; }

		//{Kardinalitaet01}
		public Action getKardinalitaet01Action_1() { return cKardinalitaet01Action_1; }
	}

	public class Kardinalitaet0xElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kardinalitaet0x");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisDigitZeroCommaAsteriskRightParenthesisKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Action cKardinalitaet0xAction_1 = (Action)cGroup.eContents().get(1);
		
		//Kardinalitaet0x:
		//
		//	("(0,*)" | "->") {Kardinalitaet0x};
		public ParserRule getRule() { return rule; }

		//("(0,*)" | "->") {Kardinalitaet0x}
		public Group getGroup() { return cGroup; }

		//"(0,*)" | "->"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"(0,*)"
		public Keyword getLeftParenthesisDigitZeroCommaAsteriskRightParenthesisKeyword_0_0() { return cLeftParenthesisDigitZeroCommaAsteriskRightParenthesisKeyword_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }

		//{Kardinalitaet0x}
		public Action getKardinalitaet0xAction_1() { return cKardinalitaet0xAction_1; }
	}

	public class Kardinalitaet11Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kardinalitaet11");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisDigitOneCommaDigitOneRightParenthesisKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Action cKardinalitaet11Action_1 = (Action)cGroup.eContents().get(1);
		
		//Kardinalitaet11:
		//
		//	("(1,1)" | "==") {Kardinalitaet11};
		public ParserRule getRule() { return rule; }

		//("(1,1)" | "==") {Kardinalitaet11}
		public Group getGroup() { return cGroup; }

		//"(1,1)" | "=="
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"(1,1)"
		public Keyword getLeftParenthesisDigitOneCommaDigitOneRightParenthesisKeyword_0_0() { return cLeftParenthesisDigitOneCommaDigitOneRightParenthesisKeyword_0_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0_1() { return cEqualsSignEqualsSignKeyword_0_1; }

		//{Kardinalitaet11}
		public Action getKardinalitaet11Action_1() { return cKardinalitaet11Action_1; }
	}

	public class Kardinalitaet1xElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kardinalitaet1x");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisDigitOneCommaAsteriskRightParenthesisKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Action cKardinalitaet1xAction_1 = (Action)cGroup.eContents().get(1);
		
		//Kardinalitaet1x:
		//
		//	("(1,*)" | "=>") {Kardinalitaet1x};
		public ParserRule getRule() { return rule; }

		//("(1,*)" | "=>") {Kardinalitaet1x}
		public Group getGroup() { return cGroup; }

		//"(1,*)" | "=>"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"(1,*)"
		public Keyword getLeftParenthesisDigitOneCommaAsteriskRightParenthesisKeyword_0_0() { return cLeftParenthesisDigitOneCommaAsteriskRightParenthesisKeyword_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_0_1() { return cEqualsSignGreaterThanSignKeyword_0_1; }

		//{Kardinalitaet1x}
		public Action getKardinalitaet1xAction_1() { return cKardinalitaet1xAction_1; }
	}
	
	
	private MetamodellElements pMetamodell;
	private ObjekttypElements pObjekttyp;
	private AttributElements pAttribut;
	private OperatorElements pOperator;
	private AnweisungElements pAnweisung;
	private KOTElements pKOT;
	private VOTElements pVOT;
	private OOTElements pOOT;
	private LOTElements pLOT;
	private TOTElements pTOT;
	private BeziehungElements pBeziehung;
	private Interacts_withElements pInteracts_with;
	private Is_aElements pIs_a;
	private Is_part_ofElements pIs_part_of;
	private KardinalitaetElements pKardinalitaet;
	private Kardinalitaet01Elements pKardinalitaet01;
	private Kardinalitaet0xElements pKardinalitaet0x;
	private Kardinalitaet11Elements pKardinalitaet11;
	private Kardinalitaet1xElements pKardinalitaet1x;
	private TerminalRule tANNOTATION;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SomSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniba.wiai.seda.somsl.SomSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Metamodell:
	//
	//	name=ID version=ID (objekttyp+=Objekttyp | beziehung+=Beziehung)*;
	public MetamodellElements getMetamodellAccess() {
		return (pMetamodell != null) ? pMetamodell : (pMetamodell = new MetamodellElements());
	}
	
	public ParserRule getMetamodellRule() {
		return getMetamodellAccess().getRule();
	}

	//Objekttyp:
	//
	//	ANNOTATION? (KOT | VOT) name=ID "{" attribute+=Attribut* operatoren+=Operator* "}";
	public ObjekttypElements getObjekttypAccess() {
		return (pObjekttyp != null) ? pObjekttyp : (pObjekttyp = new ObjekttypElements());
	}
	
	public ParserRule getObjekttypRule() {
		return getObjekttypAccess().getRule();
	}

	//Attribut:
	//
	//	(objekttyp=[Objekttyp] | "DT" datentyp=ID) name=ID ";";
	public AttributElements getAttributAccess() {
		return (pAttribut != null) ? pAttribut : (pAttribut = new AttributElements());
	}
	
	public ParserRule getAttributRule() {
		return getAttributAccess().getRule();
	}

	//Operator:
	//
	//	name=ID "(" parameter+=[Objekttyp]* ") {" anweisungen+=Anweisung* "}";
	public OperatorElements getOperatorAccess() {
		return (pOperator != null) ? pOperator : (pOperator = new OperatorElements());
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//Anweisung:
	//
	//	kontrollstruktur=ID "(" bedingung=Anweisung ") {" bedigteAnweisungen+=Anweisung* "}" | (objekt=[Objekttyp] ".")?
	//
	//	operator=ID;
	public AnweisungElements getAnweisungAccess() {
		return (pAnweisung != null) ? pAnweisung : (pAnweisung = new AnweisungElements());
	}
	
	public ParserRule getAnweisungRule() {
		return getAnweisungAccess().getRule();
	}

	//KOT:
	//
	//	OOT | LOT | TOT;
	public KOTElements getKOTAccess() {
		return (pKOT != null) ? pKOT : (pKOT = new KOTElements());
	}
	
	public ParserRule getKOTRule() {
		return getKOTAccess().getRule();
	}

	//VOT:
	//
	//	"VOT" {VOT};
	public VOTElements getVOTAccess() {
		return (pVOT != null) ? pVOT : (pVOT = new VOTElements());
	}
	
	public ParserRule getVOTRule() {
		return getVOTAccess().getRule();
	}

	//OOT:
	//
	//	"OOT" {OOT};
	public OOTElements getOOTAccess() {
		return (pOOT != null) ? pOOT : (pOOT = new OOTElements());
	}
	
	public ParserRule getOOTRule() {
		return getOOTAccess().getRule();
	}

	//LOT:
	//
	//	"LOT" {LOT};
	public LOTElements getLOTAccess() {
		return (pLOT != null) ? pLOT : (pLOT = new LOTElements());
	}
	
	public ParserRule getLOTRule() {
		return getLOTAccess().getRule();
	}

	//TOT:
	//
	//	"TOT" {TOT};
	public TOTElements getTOTAccess() {
		return (pTOT != null) ? pTOT : (pTOT = new TOTElements());
	}
	
	public ParserRule getTOTRule() {
		return getTOTAccess().getRule();
	}

	//Beziehung:
	//
	//	ANNOTATION? (Is_a | Interacts_with | Is_part_of);
	public BeziehungElements getBeziehungAccess() {
		return (pBeziehung != null) ? pBeziehung : (pBeziehung = new BeziehungElements());
	}
	
	public ParserRule getBeziehungRule() {
		return getBeziehungAccess().getRule();
	}

	//Interacts_with:
	//
	//	"interacts_with:"? objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x)
	//
	//	objekttyp2=[Objekttyp];
	public Interacts_withElements getInteracts_withAccess() {
		return (pInteracts_with != null) ? pInteracts_with : (pInteracts_with = new Interacts_withElements());
	}
	
	public ParserRule getInteracts_withRule() {
		return getInteracts_withAccess().getRule();
	}

	//Is_a:
	//
	//	"is_a:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet11) objekttyp2=[Objekttyp];
	public Is_aElements getIs_aAccess() {
		return (pIs_a != null) ? pIs_a : (pIs_a = new Is_aElements());
	}
	
	public ParserRule getIs_aRule() {
		return getIs_aAccess().getRule();
	}

	//Is_part_of:
	//
	//	"is_part_of:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x)
	//
	//	objekttyp2=[Objekttyp];
	public Is_part_ofElements getIs_part_ofAccess() {
		return (pIs_part_of != null) ? pIs_part_of : (pIs_part_of = new Is_part_ofElements());
	}
	
	public ParserRule getIs_part_ofRule() {
		return getIs_part_ofAccess().getRule();
	}

	//Kardinalitaet:
	//
	//	Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet11 | Kardinalitaet1x;
	public KardinalitaetElements getKardinalitaetAccess() {
		return (pKardinalitaet != null) ? pKardinalitaet : (pKardinalitaet = new KardinalitaetElements());
	}
	
	public ParserRule getKardinalitaetRule() {
		return getKardinalitaetAccess().getRule();
	}

	//Kardinalitaet01:
	//
	//	("(0,1)" | "--") {Kardinalitaet01};
	public Kardinalitaet01Elements getKardinalitaet01Access() {
		return (pKardinalitaet01 != null) ? pKardinalitaet01 : (pKardinalitaet01 = new Kardinalitaet01Elements());
	}
	
	public ParserRule getKardinalitaet01Rule() {
		return getKardinalitaet01Access().getRule();
	}

	//Kardinalitaet0x:
	//
	//	("(0,*)" | "->") {Kardinalitaet0x};
	public Kardinalitaet0xElements getKardinalitaet0xAccess() {
		return (pKardinalitaet0x != null) ? pKardinalitaet0x : (pKardinalitaet0x = new Kardinalitaet0xElements());
	}
	
	public ParserRule getKardinalitaet0xRule() {
		return getKardinalitaet0xAccess().getRule();
	}

	//Kardinalitaet11:
	//
	//	("(1,1)" | "==") {Kardinalitaet11};
	public Kardinalitaet11Elements getKardinalitaet11Access() {
		return (pKardinalitaet11 != null) ? pKardinalitaet11 : (pKardinalitaet11 = new Kardinalitaet11Elements());
	}
	
	public ParserRule getKardinalitaet11Rule() {
		return getKardinalitaet11Access().getRule();
	}

	//Kardinalitaet1x:
	//
	//	("(1,*)" | "=>") {Kardinalitaet1x};
	public Kardinalitaet1xElements getKardinalitaet1xAccess() {
		return (pKardinalitaet1x != null) ? pKardinalitaet1x : (pKardinalitaet1x = new Kardinalitaet1xElements());
	}
	
	public ParserRule getKardinalitaet1xRule() {
		return getKardinalitaet1xAccess().getRule();
	}

	//terminal ANNOTATION:
	//
	//	"@" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getANNOTATIONRule() {
		return (tANNOTATION != null) ? tANNOTATION : (tANNOTATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANNOTATION"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
