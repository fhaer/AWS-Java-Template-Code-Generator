/*
 * generated by Xtext
 */
package de.uniba.wiai.seda.fha.som.aws.soa.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import de.uniba.wiai.seda.fha.som.aws.aws.AwS
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import de.uniba.wiai.seda.fha.som.aws.soa.soa.SOA_AwS
import de.uniba.wiai.seda.fha.som.aws.aws.Objekttyp
import de.uniba.wiai.seda.fha.som.aws.aws.Operator
import de.uniba.wiai.seda.fha.som.aws.soa.soa.Service
import de.uniba.wiai.seda.fha.som.aws.soa.soa.ServiceMethode
import de.uniba.wiai.seda.fha.som.aws.soa.soa.Vorgangsservice
import de.uniba.wiai.seda.fha.som.aws.soa.soa.Entityservice

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class SoaScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	
	/**
	 * sets global scope for Objekttyp
	 */
	override getScope(EObject context, EReference reference) {
		if (reference.EType.name.equals("Entityservice")) {
			return getGlobalScope(context, typeof(Entityservice))
		}
		if (reference.EType.name.equals("Vorgangsservice")) {
			return getGlobalScope(context, typeof(Vorgangsservice))
		}
		if (reference.EType.name.equals("Service")) {
			return getGlobalScope(context, typeof(Service))
		}
		if (reference.EType.name.equals("ServiceMethode")) {
			return getGlobalScope(context, typeof(ServiceMethode))
		}
		if (reference.EType.name.equals("Operator")) {
			return getGlobalScope(context, typeof(Operator))
		}
		if (reference.EType.name.equals("LOT")) {
			return getGlobalScope(context, typeof(Objekttyp))
		}
		if (reference.EType.name.equals("TOT")) {
			return getGlobalScope(context, typeof(Objekttyp))
		}
		if (reference.EType.name.equals("OOT")) {
			return getGlobalScope(context, typeof(Objekttyp))
		}
		if (reference.EType.name.equals("KOT")) {
			return getGlobalScope(context, typeof(Objekttyp))
		}
		if (reference.EType.name.equals("VOT")) {
			return getGlobalScope(context, typeof(Objekttyp))
		}
		if (reference.EType.name.equals("Objekttyp")) {
			return getGlobalScope(context, typeof(Objekttyp))
		}
		super.getScope(context, reference)
	}

	/**
     * returns the global scope for the given type
     */
	def <T extends EObject> IScope getGlobalScope(EObject anyObject, Class<T> typ) {
		var EObject aws = anyObject
		
		// find root object
		while (!(aws instanceof AwS || aws instanceof SOA_AwS)) {
			aws = aws.eContainer
		}
		val typs = aws.eAllContents.filter(typ).toIterable;
		return Scopes.scopeFor(typs)
	}
}
