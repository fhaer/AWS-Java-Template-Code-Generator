/**
 * generated by Xtext
 */
package de.uniba.wiai.seda.fha.som.aws.soa.scoping;

import com.google.common.collect.Iterators;
import de.uniba.wiai.seda.fha.som.aws.aws.AwS;
import de.uniba.wiai.seda.fha.som.aws.aws.Objekttyp;
import de.uniba.wiai.seda.fha.som.aws.aws.Operator;
import de.uniba.wiai.seda.fha.som.aws.soa.soa.Entityservice;
import de.uniba.wiai.seda.fha.som.aws.soa.soa.SOA_AwS;
import de.uniba.wiai.seda.fha.som.aws.soa.soa.Service;
import de.uniba.wiai.seda.fha.som.aws.soa.soa.ServiceMethode;
import de.uniba.wiai.seda.fha.som.aws.soa.soa.Vorgangsservice;
import java.util.Iterator;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class SoaScopeProvider extends AbstractDeclarativeScopeProvider {
  /**
   * sets global scope for Objekttyp
   */
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      EClassifier _eType = reference.getEType();
      String _name = _eType.getName();
      boolean _equals = _name.equals("Entityservice");
      if (_equals) {
        return this.<Entityservice>getGlobalScope(context, Entityservice.class);
      }
      EClassifier _eType_1 = reference.getEType();
      String _name_1 = _eType_1.getName();
      boolean _equals_1 = _name_1.equals("Vorgangsservice");
      if (_equals_1) {
        return this.<Vorgangsservice>getGlobalScope(context, Vorgangsservice.class);
      }
      EClassifier _eType_2 = reference.getEType();
      String _name_2 = _eType_2.getName();
      boolean _equals_2 = _name_2.equals("Service");
      if (_equals_2) {
        return this.<Service>getGlobalScope(context, Service.class);
      }
      EClassifier _eType_3 = reference.getEType();
      String _name_3 = _eType_3.getName();
      boolean _equals_3 = _name_3.equals("ServiceMethode");
      if (_equals_3) {
        return this.<ServiceMethode>getGlobalScope(context, ServiceMethode.class);
      }
      EClassifier _eType_4 = reference.getEType();
      String _name_4 = _eType_4.getName();
      boolean _equals_4 = _name_4.equals("Operator");
      if (_equals_4) {
        return this.<Operator>getGlobalScope(context, Operator.class);
      }
      EClassifier _eType_5 = reference.getEType();
      String _name_5 = _eType_5.getName();
      boolean _equals_5 = _name_5.equals("LOT");
      if (_equals_5) {
        return this.<Objekttyp>getGlobalScope(context, Objekttyp.class);
      }
      EClassifier _eType_6 = reference.getEType();
      String _name_6 = _eType_6.getName();
      boolean _equals_6 = _name_6.equals("TOT");
      if (_equals_6) {
        return this.<Objekttyp>getGlobalScope(context, Objekttyp.class);
      }
      EClassifier _eType_7 = reference.getEType();
      String _name_7 = _eType_7.getName();
      boolean _equals_7 = _name_7.equals("OOT");
      if (_equals_7) {
        return this.<Objekttyp>getGlobalScope(context, Objekttyp.class);
      }
      EClassifier _eType_8 = reference.getEType();
      String _name_8 = _eType_8.getName();
      boolean _equals_8 = _name_8.equals("KOT");
      if (_equals_8) {
        return this.<Objekttyp>getGlobalScope(context, Objekttyp.class);
      }
      EClassifier _eType_9 = reference.getEType();
      String _name_9 = _eType_9.getName();
      boolean _equals_9 = _name_9.equals("VOT");
      if (_equals_9) {
        return this.<Objekttyp>getGlobalScope(context, Objekttyp.class);
      }
      EClassifier _eType_10 = reference.getEType();
      String _name_10 = _eType_10.getName();
      boolean _equals_10 = _name_10.equals("Objekttyp");
      if (_equals_10) {
        return this.<Objekttyp>getGlobalScope(context, Objekttyp.class);
      }
      IScope _scope = super.getScope(context, reference);
      _xblockexpression = (_scope);
    }
    return _xblockexpression;
  }
  
  /**
   * returns the global scope for the given type
   */
  public <T extends EObject> IScope getGlobalScope(final EObject anyObject, final Class<T> typ) {
    EObject aws = anyObject;
    boolean _or = false;
    if ((aws instanceof AwS)) {
      _or = true;
    } else {
      _or = ((aws instanceof AwS) || (aws instanceof SOA_AwS));
    }
    boolean _not = (!_or);
    boolean _while = _not;
    while (_while) {
      EObject _eContainer = aws.eContainer();
      aws = _eContainer;
      boolean _or_1 = false;
      if ((aws instanceof AwS)) {
        _or_1 = true;
      } else {
        _or_1 = ((aws instanceof AwS) || (aws instanceof SOA_AwS));
      }
      boolean _not_1 = (!_or_1);
      _while = _not_1;
    }
    TreeIterator<EObject> _eAllContents = aws.eAllContents();
    Iterator<T> _filter = Iterators.<T>filter(_eAllContents, typ);
    final Iterable<T> typs = IteratorExtensions.<T>toIterable(_filter);
    return Scopes.scopeFor(typs);
  }
}
