/*
* generated by Xtext
*/
grammar InternalAnnotation;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.uniba.wiai.seda.somsl.annotation.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.uniba.wiai.seda.somsl.annotation.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.uniba.wiai.seda.somsl.annotation.services.AnnotationGrammarAccess;

}

@parser::members {
 
 	private AnnotationGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AnnotationGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleAnnotation
entryRuleAnnotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getAlternatives()); }
(rule__Annotation__Alternatives)
{ after(grammarAccess.getAnnotationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleName
entryRuleName 
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameAccess().getGroup()); }
(rule__Name__Group__0)
{ after(grammarAccess.getNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMerge
entryRuleMerge 
:
{ before(grammarAccess.getMergeRule()); }
	 ruleMerge
{ after(grammarAccess.getMergeRule()); } 
	 EOF 
;

// Rule Merge
ruleMerge
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMergeAccess().getGroup()); }
(rule__Merge__Group__0)
{ after(grammarAccess.getMergeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIgnore
entryRuleIgnore 
:
{ before(grammarAccess.getIgnoreRule()); }
	 ruleIgnore
{ after(grammarAccess.getIgnoreRule()); } 
	 EOF 
;

// Rule Ignore
ruleIgnore
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIgnoreAccess().getGroup()); }
(rule__Ignore__Group__0)
{ after(grammarAccess.getIgnoreAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Annotation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getNameParserRuleCall_0()); }
	ruleName
{ after(grammarAccess.getAnnotationAccess().getNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getIgnoreParserRuleCall_1()); }
	ruleIgnore
{ after(grammarAccess.getAnnotationAccess().getIgnoreParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getMergeParserRuleCall_2()); }
	ruleMerge
{ after(grammarAccess.getAnnotationAccess().getMergeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Name__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group__0__Impl
	rule__Name__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getNameKeyword_0()); }

	'@name' 

{ after(grammarAccess.getNameAccess().getNameKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Name__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getNameAssignment_1()); }
(rule__Name__NameAssignment_1)
{ after(grammarAccess.getNameAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Merge__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Merge__Group__0__Impl
	rule__Merge__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMergeAccess().getMergeKeyword_0()); }

	'@merge' 

{ after(grammarAccess.getMergeAccess().getMergeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Merge__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Merge__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMergeAccess().getNameAssignment_1()); }
(rule__Merge__NameAssignment_1)
{ after(grammarAccess.getMergeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Ignore__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ignore__Group__0__Impl
	rule__Ignore__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ignore__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgnoreAccess().getIgnoreKeyword_0()); }

	'@ignore' 

{ after(grammarAccess.getIgnoreAccess().getIgnoreKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ignore__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ignore__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ignore__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgnoreAccess().getIgnoreAction_1()); }
(

)
{ after(grammarAccess.getIgnoreAccess().getIgnoreAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Name__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNameAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Merge__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMergeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMergeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_'|'<'|'>') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'<'|'>')*;

RULE_VERSION : ('0'..'9')+ '.' ('0'..'9')+;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


