/*
* generated by Xtext
*/
package de.uniba.wiai.seda.somsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.uniba.wiai.seda.somsl.services.SomSLGrammarAccess;

public class SomSLParser extends AbstractContentAssistParser {
	
	@Inject
	private SomSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.uniba.wiai.seda.somsl.ui.contentassist.antlr.internal.InternalSomSLParser createParser() {
		de.uniba.wiai.seda.somsl.ui.contentassist.antlr.internal.InternalSomSLParser result = new de.uniba.wiai.seda.somsl.ui.contentassist.antlr.internal.InternalSomSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMetamodellAccess().getAlternatives_2(), "rule__Metamodell__Alternatives_2");
					put(grammarAccess.getObjekttypAccess().getAlternatives_1(), "rule__Objekttyp__Alternatives_1");
					put(grammarAccess.getAttributAccess().getAlternatives_0(), "rule__Attribut__Alternatives_0");
					put(grammarAccess.getAnweisungAccess().getAlternatives(), "rule__Anweisung__Alternatives");
					put(grammarAccess.getKOTAccess().getAlternatives(), "rule__KOT__Alternatives");
					put(grammarAccess.getBeziehungAccess().getAlternatives_1(), "rule__Beziehung__Alternatives_1");
					put(grammarAccess.getInteracts_withAccess().getKardinalitaetAlternatives_2_0(), "rule__Interacts_with__KardinalitaetAlternatives_2_0");
					put(grammarAccess.getIs_aAccess().getKardinalitaetAlternatives_2_0(), "rule__Is_a__KardinalitaetAlternatives_2_0");
					put(grammarAccess.getIs_part_ofAccess().getKardinalitaetAlternatives_2_0(), "rule__Is_part_of__KardinalitaetAlternatives_2_0");
					put(grammarAccess.getKardinalitaetAccess().getAlternatives(), "rule__Kardinalitaet__Alternatives");
					put(grammarAccess.getKardinalitaet01Access().getAlternatives_0(), "rule__Kardinalitaet01__Alternatives_0");
					put(grammarAccess.getKardinalitaet0xAccess().getAlternatives_0(), "rule__Kardinalitaet0x__Alternatives_0");
					put(grammarAccess.getKardinalitaet11Access().getAlternatives_0(), "rule__Kardinalitaet11__Alternatives_0");
					put(grammarAccess.getKardinalitaet1xAccess().getAlternatives_0(), "rule__Kardinalitaet1x__Alternatives_0");
					put(grammarAccess.getMetamodellAccess().getGroup(), "rule__Metamodell__Group__0");
					put(grammarAccess.getObjekttypAccess().getGroup(), "rule__Objekttyp__Group__0");
					put(grammarAccess.getAttributAccess().getGroup(), "rule__Attribut__Group__0");
					put(grammarAccess.getAttributAccess().getGroup_0_1(), "rule__Attribut__Group_0_1__0");
					put(grammarAccess.getOperatorAccess().getGroup(), "rule__Operator__Group__0");
					put(grammarAccess.getAnweisungAccess().getGroup_0(), "rule__Anweisung__Group_0__0");
					put(grammarAccess.getAnweisungAccess().getGroup_1(), "rule__Anweisung__Group_1__0");
					put(grammarAccess.getAnweisungAccess().getGroup_1_0(), "rule__Anweisung__Group_1_0__0");
					put(grammarAccess.getVOTAccess().getGroup(), "rule__VOT__Group__0");
					put(grammarAccess.getOOTAccess().getGroup(), "rule__OOT__Group__0");
					put(grammarAccess.getLOTAccess().getGroup(), "rule__LOT__Group__0");
					put(grammarAccess.getTOTAccess().getGroup(), "rule__TOT__Group__0");
					put(grammarAccess.getBeziehungAccess().getGroup(), "rule__Beziehung__Group__0");
					put(grammarAccess.getInteracts_withAccess().getGroup(), "rule__Interacts_with__Group__0");
					put(grammarAccess.getIs_aAccess().getGroup(), "rule__Is_a__Group__0");
					put(grammarAccess.getIs_part_ofAccess().getGroup(), "rule__Is_part_of__Group__0");
					put(grammarAccess.getKardinalitaet01Access().getGroup(), "rule__Kardinalitaet01__Group__0");
					put(grammarAccess.getKardinalitaet0xAccess().getGroup(), "rule__Kardinalitaet0x__Group__0");
					put(grammarAccess.getKardinalitaet11Access().getGroup(), "rule__Kardinalitaet11__Group__0");
					put(grammarAccess.getKardinalitaet1xAccess().getGroup(), "rule__Kardinalitaet1x__Group__0");
					put(grammarAccess.getMetamodellAccess().getNameAssignment_0(), "rule__Metamodell__NameAssignment_0");
					put(grammarAccess.getMetamodellAccess().getVersionAssignment_1(), "rule__Metamodell__VersionAssignment_1");
					put(grammarAccess.getMetamodellAccess().getObjekttypAssignment_2_0(), "rule__Metamodell__ObjekttypAssignment_2_0");
					put(grammarAccess.getMetamodellAccess().getBeziehungAssignment_2_1(), "rule__Metamodell__BeziehungAssignment_2_1");
					put(grammarAccess.getObjekttypAccess().getNameAssignment_2(), "rule__Objekttyp__NameAssignment_2");
					put(grammarAccess.getObjekttypAccess().getAttributeAssignment_4(), "rule__Objekttyp__AttributeAssignment_4");
					put(grammarAccess.getObjekttypAccess().getOperatorenAssignment_5(), "rule__Objekttyp__OperatorenAssignment_5");
					put(grammarAccess.getAttributAccess().getObjekttypAssignment_0_0(), "rule__Attribut__ObjekttypAssignment_0_0");
					put(grammarAccess.getAttributAccess().getDatentypAssignment_0_1_1(), "rule__Attribut__DatentypAssignment_0_1_1");
					put(grammarAccess.getAttributAccess().getNameAssignment_1(), "rule__Attribut__NameAssignment_1");
					put(grammarAccess.getOperatorAccess().getNameAssignment_0(), "rule__Operator__NameAssignment_0");
					put(grammarAccess.getOperatorAccess().getParameterAssignment_2(), "rule__Operator__ParameterAssignment_2");
					put(grammarAccess.getOperatorAccess().getAnweisungenAssignment_4(), "rule__Operator__AnweisungenAssignment_4");
					put(grammarAccess.getAnweisungAccess().getKontrollstrukturAssignment_0_0(), "rule__Anweisung__KontrollstrukturAssignment_0_0");
					put(grammarAccess.getAnweisungAccess().getBedingungAssignment_0_2(), "rule__Anweisung__BedingungAssignment_0_2");
					put(grammarAccess.getAnweisungAccess().getBedigteAnweisungenAssignment_0_4(), "rule__Anweisung__BedigteAnweisungenAssignment_0_4");
					put(grammarAccess.getAnweisungAccess().getObjektAssignment_1_0_0(), "rule__Anweisung__ObjektAssignment_1_0_0");
					put(grammarAccess.getAnweisungAccess().getOperatorAssignment_1_1(), "rule__Anweisung__OperatorAssignment_1_1");
					put(grammarAccess.getInteracts_withAccess().getObjekttyp1Assignment_1(), "rule__Interacts_with__Objekttyp1Assignment_1");
					put(grammarAccess.getInteracts_withAccess().getKardinalitaetAssignment_2(), "rule__Interacts_with__KardinalitaetAssignment_2");
					put(grammarAccess.getInteracts_withAccess().getObjekttyp2Assignment_3(), "rule__Interacts_with__Objekttyp2Assignment_3");
					put(grammarAccess.getIs_aAccess().getObjekttyp1Assignment_1(), "rule__Is_a__Objekttyp1Assignment_1");
					put(grammarAccess.getIs_aAccess().getKardinalitaetAssignment_2(), "rule__Is_a__KardinalitaetAssignment_2");
					put(grammarAccess.getIs_aAccess().getObjekttyp2Assignment_3(), "rule__Is_a__Objekttyp2Assignment_3");
					put(grammarAccess.getIs_part_ofAccess().getObjekttyp1Assignment_1(), "rule__Is_part_of__Objekttyp1Assignment_1");
					put(grammarAccess.getIs_part_ofAccess().getKardinalitaetAssignment_2(), "rule__Is_part_of__KardinalitaetAssignment_2");
					put(grammarAccess.getIs_part_ofAccess().getObjekttyp2Assignment_3(), "rule__Is_part_of__Objekttyp2Assignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.uniba.wiai.seda.somsl.ui.contentassist.antlr.internal.InternalSomSLParser typedParser = (de.uniba.wiai.seda.somsl.ui.contentassist.antlr.internal.InternalSomSLParser) parser;
			typedParser.entryRuleMetamodell();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SomSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SomSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
