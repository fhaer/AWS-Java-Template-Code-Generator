/*
* generated by Xtext
*/
package de.uniba.wiai.seda.fha.som.aws.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.uniba.wiai.seda.fha.annotation.services.AnnotationGrammarAccess;

@Singleton
public class AwsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AwSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AwS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAwSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVersionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVersionVERSION_NUMBERTerminalRuleCall_2_1_0 = (RuleCall)cVersionAssignment_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cKosAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cKosKOSParserRuleCall_3_0_0 = (RuleCall)cKosAssignment_3_0.eContents().get(0);
		private final Assignment cVosAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cVosVOSParserRuleCall_3_1_0 = (RuleCall)cVosAssignment_3_1.eContents().get(0);
		
		//AwS:
		//
		//	"AwS:" name=ID ("v" version=VERSION_NUMBER)? (kos=KOS & vos=VOS);
		public ParserRule getRule() { return rule; }

		//"AwS:" name=ID ("v" version=VERSION_NUMBER)? (kos=KOS & vos=VOS)
		public Group getGroup() { return cGroup; }

		//"AwS:"
		public Keyword getAwSKeyword_0() { return cAwSKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("v" version=VERSION_NUMBER)?
		public Group getGroup_2() { return cGroup_2; }

		//"v"
		public Keyword getVKeyword_2_0() { return cVKeyword_2_0; }

		//version=VERSION_NUMBER
		public Assignment getVersionAssignment_2_1() { return cVersionAssignment_2_1; }

		//VERSION_NUMBER
		public RuleCall getVersionVERSION_NUMBERTerminalRuleCall_2_1_0() { return cVersionVERSION_NUMBERTerminalRuleCall_2_1_0; }

		//kos=KOS & vos=VOS
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//kos=KOS
		public Assignment getKosAssignment_3_0() { return cKosAssignment_3_0; }

		//KOS
		public RuleCall getKosKOSParserRuleCall_3_0_0() { return cKosKOSParserRuleCall_3_0_0; }

		//vos=VOS
		public Assignment getVosAssignment_3_1() { return cVosAssignment_3_1; }

		//VOS
		public RuleCall getVosVOSParserRuleCall_3_1_0() { return cVosVOSParserRuleCall_3_1_0; }
	}

	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Schema");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVOSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKOSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Schema:
		//
		//	VOS | KOS;
		public ParserRule getRule() { return rule; }

		//VOS | KOS
		public Alternatives getAlternatives() { return cAlternatives; }

		//VOS
		public RuleCall getVOSParserRuleCall_0() { return cVOSParserRuleCall_0; }

		//KOS
		public RuleCall getKOSParserRuleCall_1() { return cKOSParserRuleCall_1; }
	}

	public class VOSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VOS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cNameVOSKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cObjekttypenAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cObjekttypenVOTParserRuleCall_2_0_0 = (RuleCall)cObjekttypenAssignment_2_0.eContents().get(0);
		private final Assignment cBeziehungenAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBeziehungenInteracts_withParserRuleCall_2_1_0 = (RuleCall)cBeziehungenAssignment_2_1.eContents().get(0);
		private final Assignment cGliederungAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cGliederungVOSParserRuleCall_2_2_0 = (RuleCall)cGliederungAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VOS:
		//
		//	(name="VOS" | name=ID) "{" (objekttypen+=VOT | beziehungen+=Interacts_with | gliederung+=VOS)+ "}";
		public ParserRule getRule() { return rule; }

		//(name="VOS" | name=ID) "{" (objekttypen+=VOT | beziehungen+=Interacts_with | gliederung+=VOS)+ "}"
		public Group getGroup() { return cGroup; }

		//name="VOS" | name=ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//name="VOS"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"VOS"
		public Keyword getNameVOSKeyword_0_0_0() { return cNameVOSKeyword_0_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(objekttypen+=VOT | beziehungen+=Interacts_with | gliederung+=VOS)+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//objekttypen+=VOT
		public Assignment getObjekttypenAssignment_2_0() { return cObjekttypenAssignment_2_0; }

		//VOT
		public RuleCall getObjekttypenVOTParserRuleCall_2_0_0() { return cObjekttypenVOTParserRuleCall_2_0_0; }

		//beziehungen+=Interacts_with
		public Assignment getBeziehungenAssignment_2_1() { return cBeziehungenAssignment_2_1; }

		//Interacts_with
		public RuleCall getBeziehungenInteracts_withParserRuleCall_2_1_0() { return cBeziehungenInteracts_withParserRuleCall_2_1_0; }

		//gliederung+=VOS
		public Assignment getGliederungAssignment_2_2() { return cGliederungAssignment_2_2; }

		//VOS
		public RuleCall getGliederungVOSParserRuleCall_2_2_0() { return cGliederungVOSParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class KOSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KOS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cNameKOSKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cObjekttypenAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cObjekttypenKOTParserRuleCall_2_0_0 = (RuleCall)cObjekttypenAssignment_2_0.eContents().get(0);
		private final Assignment cBeziehungenAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBeziehungenBeziehungParserRuleCall_2_1_0 = (RuleCall)cBeziehungenAssignment_2_1.eContents().get(0);
		private final Assignment cGliederungAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cGliederungKOSParserRuleCall_2_2_0 = (RuleCall)cGliederungAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KOS:
		//
		//	(name="KOS" | name=ID) "{" (objekttypen+=KOT | beziehungen+=Beziehung | gliederung+=KOS)+ "}";
		public ParserRule getRule() { return rule; }

		//(name="KOS" | name=ID) "{" (objekttypen+=KOT | beziehungen+=Beziehung | gliederung+=KOS)+ "}"
		public Group getGroup() { return cGroup; }

		//name="KOS" | name=ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//name="KOS"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"KOS"
		public Keyword getNameKOSKeyword_0_0_0() { return cNameKOSKeyword_0_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(objekttypen+=KOT | beziehungen+=Beziehung | gliederung+=KOS)+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//objekttypen+=KOT
		public Assignment getObjekttypenAssignment_2_0() { return cObjekttypenAssignment_2_0; }

		//KOT
		public RuleCall getObjekttypenKOTParserRuleCall_2_0_0() { return cObjekttypenKOTParserRuleCall_2_0_0; }

		//beziehungen+=Beziehung
		public Assignment getBeziehungenAssignment_2_1() { return cBeziehungenAssignment_2_1; }

		//Beziehung
		public RuleCall getBeziehungenBeziehungParserRuleCall_2_1_0() { return cBeziehungenBeziehungParserRuleCall_2_1_0; }

		//gliederung+=KOS
		public Assignment getGliederungAssignment_2_2() { return cGliederungAssignment_2_2; }

		//KOS
		public RuleCall getGliederungKOSParserRuleCall_2_2_0() { return cGliederungKOSParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ObjekttypElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Objekttyp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVOTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKOTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Objekttyp:
		//
		//	VOT | KOT;
		public ParserRule getRule() { return rule; }

		//VOT | KOT
		public Alternatives getAlternatives() { return cAlternatives; }

		//VOT
		public RuleCall getVOTParserRuleCall_0() { return cVOTParserRuleCall_0; }

		//KOT
		public RuleCall getKOTParserRuleCall_1() { return cKOTParserRuleCall_1; }
	}

	public class VOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cVOTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cAttributeAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cAttributeAttributParserRuleCall_4_0_0 = (RuleCall)cAttributeAssignment_4_0.eContents().get(0);
		private final Assignment cOperatorenAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOperatorenOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorenAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VOT:
		//
		//	annotation=Annotation? "VOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}";
		public ParserRule getRule() { return rule; }

		//annotation=Annotation? "VOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}"
		public Group getGroup() { return cGroup; }

		//annotation=Annotation?
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//"VOT"
		public Keyword getVOTKeyword_1() { return cVOTKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(attribute+=Attribut | operatoren+=Operator)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//attribute+=Attribut
		public Assignment getAttributeAssignment_4_0() { return cAttributeAssignment_4_0; }

		//Attribut
		public RuleCall getAttributeAttributParserRuleCall_4_0_0() { return cAttributeAttributParserRuleCall_4_0_0; }

		//operatoren+=Operator
		public Assignment getOperatorenAssignment_4_1() { return cOperatorenAssignment_4_1; }

		//Operator
		public RuleCall getOperatorenOperatorParserRuleCall_4_1_0() { return cOperatorenOperatorParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class KOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KOT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOOTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLOTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTOTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//KOT:
		//
		//	OOT | LOT | TOT;
		public ParserRule getRule() { return rule; }

		//OOT | LOT | TOT
		public Alternatives getAlternatives() { return cAlternatives; }

		//OOT
		public RuleCall getOOTParserRuleCall_0() { return cOOTParserRuleCall_0; }

		//LOT
		public RuleCall getLOTParserRuleCall_1() { return cLOTParserRuleCall_1; }

		//TOT
		public RuleCall getTOTParserRuleCall_2() { return cTOTParserRuleCall_2; }
	}

	public class OOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cOOTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cAttributeAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cAttributeAttributParserRuleCall_4_0_0 = (RuleCall)cAttributeAssignment_4_0.eContents().get(0);
		private final Assignment cOperatorenAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOperatorenOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorenAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OOT:
		//
		//	annotation=Annotation? "OOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}";
		public ParserRule getRule() { return rule; }

		//annotation=Annotation? "OOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}"
		public Group getGroup() { return cGroup; }

		//annotation=Annotation?
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//"OOT"
		public Keyword getOOTKeyword_1() { return cOOTKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(attribute+=Attribut | operatoren+=Operator)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//attribute+=Attribut
		public Assignment getAttributeAssignment_4_0() { return cAttributeAssignment_4_0; }

		//Attribut
		public RuleCall getAttributeAttributParserRuleCall_4_0_0() { return cAttributeAttributParserRuleCall_4_0_0; }

		//operatoren+=Operator
		public Assignment getOperatorenAssignment_4_1() { return cOperatorenAssignment_4_1; }

		//Operator
		public RuleCall getOperatorenOperatorParserRuleCall_4_1_0() { return cOperatorenOperatorParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class LOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cLOTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cAttributeAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cAttributeAttributParserRuleCall_4_0_0 = (RuleCall)cAttributeAssignment_4_0.eContents().get(0);
		private final Assignment cOperatorenAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOperatorenOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorenAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LOT:
		//
		//	annotation=Annotation? "LOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}";
		public ParserRule getRule() { return rule; }

		//annotation=Annotation? "LOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}"
		public Group getGroup() { return cGroup; }

		//annotation=Annotation?
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//"LOT"
		public Keyword getLOTKeyword_1() { return cLOTKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(attribute+=Attribut | operatoren+=Operator)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//attribute+=Attribut
		public Assignment getAttributeAssignment_4_0() { return cAttributeAssignment_4_0; }

		//Attribut
		public RuleCall getAttributeAttributParserRuleCall_4_0_0() { return cAttributeAttributParserRuleCall_4_0_0; }

		//operatoren+=Operator
		public Assignment getOperatorenAssignment_4_1() { return cOperatorenAssignment_4_1; }

		//Operator
		public RuleCall getOperatorenOperatorParserRuleCall_4_1_0() { return cOperatorenOperatorParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cTOTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cAttributeAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cAttributeAttributParserRuleCall_4_0_0 = (RuleCall)cAttributeAssignment_4_0.eContents().get(0);
		private final Assignment cOperatorenAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOperatorenOperatorParserRuleCall_4_1_0 = (RuleCall)cOperatorenAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TOT:
		//
		//	annotation=Annotation? "TOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}";
		public ParserRule getRule() { return rule; }

		//annotation=Annotation? "TOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}"
		public Group getGroup() { return cGroup; }

		//annotation=Annotation?
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//"TOT"
		public Keyword getTOTKeyword_1() { return cTOTKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(attribute+=Attribut | operatoren+=Operator)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//attribute+=Attribut
		public Assignment getAttributeAssignment_4_0() { return cAttributeAssignment_4_0; }

		//Attribut
		public RuleCall getAttributeAttributParserRuleCall_4_0_0() { return cAttributeAttributParserRuleCall_4_0_0; }

		//operatoren+=Operator
		public Assignment getOperatorenAssignment_4_1() { return cOperatorenAssignment_4_1; }

		//Operator
		public RuleCall getOperatorenOperatorParserRuleCall_4_1_0() { return cOperatorenOperatorParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AttributElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypObjekttypCrossReference_0_0 = (CrossReference)cTypAssignment_0.eContents().get(0);
		private final RuleCall cTypObjekttypIDTerminalRuleCall_0_0_1 = (RuleCall)cTypObjekttypCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Attribut:
		//
		//	typ=[Objekttyp]? name=ID ";";
		public ParserRule getRule() { return rule; }

		//typ=[Objekttyp]? name=ID ";"
		public Group getGroup() { return cGroup; }

		//typ=[Objekttyp]?
		public Assignment getTypAssignment_0() { return cTypAssignment_0; }

		//[Objekttyp]
		public CrossReference getTypObjekttypCrossReference_0_0() { return cTypObjekttypCrossReference_0_0; }

		//ID
		public RuleCall getTypObjekttypIDTerminalRuleCall_0_0_1() { return cTypObjekttypIDTerminalRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cParameterObjekttypCrossReference_2_0 = (CrossReference)cParameterAssignment_2.eContents().get(0);
		private final RuleCall cParameterObjekttypIDTerminalRuleCall_2_0_1 = (RuleCall)cParameterObjekttypCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Operator:
		//
		//	name=ID "(" parameter+=[Objekttyp]* ")" ";";
		public ParserRule getRule() { return rule; }

		//name=ID "(" parameter+=[Objekttyp]* ")" ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameter+=[Objekttyp]*
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }

		//[Objekttyp]
		public CrossReference getParameterObjekttypCrossReference_2_0() { return cParameterObjekttypCrossReference_2_0; }

		//ID
		public RuleCall getParameterObjekttypIDTerminalRuleCall_2_0_1() { return cParameterObjekttypIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class BeziehungElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Beziehung");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteracts_withParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIs_aParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIs_part_ofParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Beziehung:
		//
		//	Interacts_with | Is_a | Is_part_of;
		public ParserRule getRule() { return rule; }

		//Interacts_with | Is_a | Is_part_of
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interacts_with
		public RuleCall getInteracts_withParserRuleCall_0() { return cInteracts_withParserRuleCall_0; }

		//Is_a
		public RuleCall getIs_aParserRuleCall_1() { return cIs_aParserRuleCall_1; }

		//Is_part_of
		public RuleCall getIs_part_ofParserRuleCall_2() { return cIs_part_ofParserRuleCall_2; }
	}

	public class Interacts_withElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interacts_with");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cInteracts_withKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjekttyp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cObjekttyp1ObjekttypCrossReference_2_0 = (CrossReference)cObjekttyp1Assignment_2.eContents().get(0);
		private final RuleCall cObjekttyp1ObjekttypIDTerminalRuleCall_2_0_1 = (RuleCall)cObjekttyp1ObjekttypCrossReference_2_0.eContents().get(1);
		private final Assignment cKardinalitaetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cKardinalitaetAlternatives_3_0 = (Alternatives)cKardinalitaetAssignment_3.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet01ParserRuleCall_3_0_0 = (RuleCall)cKardinalitaetAlternatives_3_0.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet0xParserRuleCall_3_0_1 = (RuleCall)cKardinalitaetAlternatives_3_0.eContents().get(1);
		private final RuleCall cKardinalitaetKardinalitaet1xParserRuleCall_3_0_2 = (RuleCall)cKardinalitaetAlternatives_3_0.eContents().get(2);
		private final Assignment cObjekttyp2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cObjekttyp2ObjekttypCrossReference_4_0 = (CrossReference)cObjekttyp2Assignment_4.eContents().get(0);
		private final RuleCall cObjekttyp2ObjekttypIDTerminalRuleCall_4_0_1 = (RuleCall)cObjekttyp2ObjekttypCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Interacts_with:
		//
		//	annotation=Annotation? "interacts_with:"? objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x |
		//
		//	Kardinalitaet1x) objekttyp2=[Objekttyp] ";";
		public ParserRule getRule() { return rule; }

		//annotation=Annotation? "interacts_with:"? objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x |
		//
		//Kardinalitaet1x) objekttyp2=[Objekttyp] ";"
		public Group getGroup() { return cGroup; }

		//annotation=Annotation?
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//"interacts_with:"?
		public Keyword getInteracts_withKeyword_1() { return cInteracts_withKeyword_1; }

		//objekttyp1=[Objekttyp]
		public Assignment getObjekttyp1Assignment_2() { return cObjekttyp1Assignment_2; }

		//[Objekttyp]
		public CrossReference getObjekttyp1ObjekttypCrossReference_2_0() { return cObjekttyp1ObjekttypCrossReference_2_0; }

		//ID
		public RuleCall getObjekttyp1ObjekttypIDTerminalRuleCall_2_0_1() { return cObjekttyp1ObjekttypIDTerminalRuleCall_2_0_1; }

		//kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x)
		public Assignment getKardinalitaetAssignment_3() { return cKardinalitaetAssignment_3; }

		//Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x
		public Alternatives getKardinalitaetAlternatives_3_0() { return cKardinalitaetAlternatives_3_0; }

		//Kardinalitaet01
		public RuleCall getKardinalitaetKardinalitaet01ParserRuleCall_3_0_0() { return cKardinalitaetKardinalitaet01ParserRuleCall_3_0_0; }

		//Kardinalitaet0x
		public RuleCall getKardinalitaetKardinalitaet0xParserRuleCall_3_0_1() { return cKardinalitaetKardinalitaet0xParserRuleCall_3_0_1; }

		//Kardinalitaet1x
		public RuleCall getKardinalitaetKardinalitaet1xParserRuleCall_3_0_2() { return cKardinalitaetKardinalitaet1xParserRuleCall_3_0_2; }

		//objekttyp2=[Objekttyp]
		public Assignment getObjekttyp2Assignment_4() { return cObjekttyp2Assignment_4; }

		//[Objekttyp]
		public CrossReference getObjekttyp2ObjekttypCrossReference_4_0() { return cObjekttyp2ObjekttypCrossReference_4_0; }

		//ID
		public RuleCall getObjekttyp2ObjekttypIDTerminalRuleCall_4_0_1() { return cObjekttyp2ObjekttypIDTerminalRuleCall_4_0_1; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class Is_aElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Is_a");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cIs_aKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjekttyp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cObjekttyp1ObjekttypCrossReference_2_0 = (CrossReference)cObjekttyp1Assignment_2.eContents().get(0);
		private final RuleCall cObjekttyp1ObjekttypIDTerminalRuleCall_2_0_1 = (RuleCall)cObjekttyp1ObjekttypCrossReference_2_0.eContents().get(1);
		private final Assignment cKardinalitaetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cKardinalitaetAlternatives_3_0 = (Alternatives)cKardinalitaetAssignment_3.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet01ParserRuleCall_3_0_0 = (RuleCall)cKardinalitaetAlternatives_3_0.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet11ParserRuleCall_3_0_1 = (RuleCall)cKardinalitaetAlternatives_3_0.eContents().get(1);
		private final Assignment cObjekttyp2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cObjekttyp2ObjekttypCrossReference_4_0 = (CrossReference)cObjekttyp2Assignment_4.eContents().get(0);
		private final RuleCall cObjekttyp2ObjekttypIDTerminalRuleCall_4_0_1 = (RuleCall)cObjekttyp2ObjekttypCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Is_a:
		//
		//	annotation=Annotation? "is_a:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet11)
		//
		//	objekttyp2=[Objekttyp] ";";
		public ParserRule getRule() { return rule; }

		//annotation=Annotation? "is_a:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet11)
		//
		//objekttyp2=[Objekttyp] ";"
		public Group getGroup() { return cGroup; }

		//annotation=Annotation?
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//"is_a:"
		public Keyword getIs_aKeyword_1() { return cIs_aKeyword_1; }

		//objekttyp1=[Objekttyp]
		public Assignment getObjekttyp1Assignment_2() { return cObjekttyp1Assignment_2; }

		//[Objekttyp]
		public CrossReference getObjekttyp1ObjekttypCrossReference_2_0() { return cObjekttyp1ObjekttypCrossReference_2_0; }

		//ID
		public RuleCall getObjekttyp1ObjekttypIDTerminalRuleCall_2_0_1() { return cObjekttyp1ObjekttypIDTerminalRuleCall_2_0_1; }

		//kardinalitaet=(Kardinalitaet01 | Kardinalitaet11)
		public Assignment getKardinalitaetAssignment_3() { return cKardinalitaetAssignment_3; }

		//Kardinalitaet01 | Kardinalitaet11
		public Alternatives getKardinalitaetAlternatives_3_0() { return cKardinalitaetAlternatives_3_0; }

		//Kardinalitaet01
		public RuleCall getKardinalitaetKardinalitaet01ParserRuleCall_3_0_0() { return cKardinalitaetKardinalitaet01ParserRuleCall_3_0_0; }

		//Kardinalitaet11
		public RuleCall getKardinalitaetKardinalitaet11ParserRuleCall_3_0_1() { return cKardinalitaetKardinalitaet11ParserRuleCall_3_0_1; }

		//objekttyp2=[Objekttyp]
		public Assignment getObjekttyp2Assignment_4() { return cObjekttyp2Assignment_4; }

		//[Objekttyp]
		public CrossReference getObjekttyp2ObjekttypCrossReference_4_0() { return cObjekttyp2ObjekttypCrossReference_4_0; }

		//ID
		public RuleCall getObjekttyp2ObjekttypIDTerminalRuleCall_4_0_1() { return cObjekttyp2ObjekttypIDTerminalRuleCall_4_0_1; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class Is_part_ofElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Is_part_of");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationAssignment_0.eContents().get(0);
		private final Keyword cIs_part_ofKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjekttyp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cObjekttyp1ObjekttypCrossReference_2_0 = (CrossReference)cObjekttyp1Assignment_2.eContents().get(0);
		private final RuleCall cObjekttyp1ObjekttypIDTerminalRuleCall_2_0_1 = (RuleCall)cObjekttyp1ObjekttypCrossReference_2_0.eContents().get(1);
		private final Assignment cKardinalitaetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cKardinalitaetAlternatives_3_0 = (Alternatives)cKardinalitaetAssignment_3.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet01ParserRuleCall_3_0_0 = (RuleCall)cKardinalitaetAlternatives_3_0.eContents().get(0);
		private final RuleCall cKardinalitaetKardinalitaet0xParserRuleCall_3_0_1 = (RuleCall)cKardinalitaetAlternatives_3_0.eContents().get(1);
		private final RuleCall cKardinalitaetKardinalitaet1xParserRuleCall_3_0_2 = (RuleCall)cKardinalitaetAlternatives_3_0.eContents().get(2);
		private final Assignment cObjekttyp2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cObjekttyp2ObjekttypCrossReference_4_0 = (CrossReference)cObjekttyp2Assignment_4.eContents().get(0);
		private final RuleCall cObjekttyp2ObjekttypIDTerminalRuleCall_4_0_1 = (RuleCall)cObjekttyp2ObjekttypCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Is_part_of:
		//
		//	annotation=Annotation? "is_part_of:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x |
		//
		//	Kardinalitaet1x) objekttyp2=[Objekttyp] ";";
		public ParserRule getRule() { return rule; }

		//annotation=Annotation? "is_part_of:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x |
		//
		//Kardinalitaet1x) objekttyp2=[Objekttyp] ";"
		public Group getGroup() { return cGroup; }

		//annotation=Annotation?
		public Assignment getAnnotationAssignment_0() { return cAnnotationAssignment_0; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0_0() { return cAnnotationAnnotationParserRuleCall_0_0; }

		//"is_part_of:"
		public Keyword getIs_part_ofKeyword_1() { return cIs_part_ofKeyword_1; }

		//objekttyp1=[Objekttyp]
		public Assignment getObjekttyp1Assignment_2() { return cObjekttyp1Assignment_2; }

		//[Objekttyp]
		public CrossReference getObjekttyp1ObjekttypCrossReference_2_0() { return cObjekttyp1ObjekttypCrossReference_2_0; }

		//ID
		public RuleCall getObjekttyp1ObjekttypIDTerminalRuleCall_2_0_1() { return cObjekttyp1ObjekttypIDTerminalRuleCall_2_0_1; }

		//kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x)
		public Assignment getKardinalitaetAssignment_3() { return cKardinalitaetAssignment_3; }

		//Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet1x
		public Alternatives getKardinalitaetAlternatives_3_0() { return cKardinalitaetAlternatives_3_0; }

		//Kardinalitaet01
		public RuleCall getKardinalitaetKardinalitaet01ParserRuleCall_3_0_0() { return cKardinalitaetKardinalitaet01ParserRuleCall_3_0_0; }

		//Kardinalitaet0x
		public RuleCall getKardinalitaetKardinalitaet0xParserRuleCall_3_0_1() { return cKardinalitaetKardinalitaet0xParserRuleCall_3_0_1; }

		//Kardinalitaet1x
		public RuleCall getKardinalitaetKardinalitaet1xParserRuleCall_3_0_2() { return cKardinalitaetKardinalitaet1xParserRuleCall_3_0_2; }

		//objekttyp2=[Objekttyp]
		public Assignment getObjekttyp2Assignment_4() { return cObjekttyp2Assignment_4; }

		//[Objekttyp]
		public CrossReference getObjekttyp2ObjekttypCrossReference_4_0() { return cObjekttyp2ObjekttypCrossReference_4_0; }

		//ID
		public RuleCall getObjekttyp2ObjekttypIDTerminalRuleCall_4_0_1() { return cObjekttyp2ObjekttypIDTerminalRuleCall_4_0_1; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class KardinalitaetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kardinalitaet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKardinalitaet01ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKardinalitaet0xParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKardinalitaet11ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cKardinalitaet1xParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Kardinalitaet:
		//
		//	Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet11 | Kardinalitaet1x;
		public ParserRule getRule() { return rule; }

		//Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet11 | Kardinalitaet1x
		public Alternatives getAlternatives() { return cAlternatives; }

		//Kardinalitaet01
		public RuleCall getKardinalitaet01ParserRuleCall_0() { return cKardinalitaet01ParserRuleCall_0; }

		//Kardinalitaet0x
		public RuleCall getKardinalitaet0xParserRuleCall_1() { return cKardinalitaet0xParserRuleCall_1; }

		//Kardinalitaet11
		public RuleCall getKardinalitaet11ParserRuleCall_2() { return cKardinalitaet11ParserRuleCall_2; }

		//Kardinalitaet1x
		public RuleCall getKardinalitaet1xParserRuleCall_3() { return cKardinalitaet1xParserRuleCall_3; }
	}

	public class Kardinalitaet01Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kardinalitaet01");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLeftParenthesisDigitZeroCommaDigitOneRightParenthesisKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Action cKardinalitaet01Action_1 = (Action)cGroup.eContents().get(1);
		
		//Kardinalitaet01:
		//
		//	("--" | "(0,1)") {Kardinalitaet01};
		public ParserRule getRule() { return rule; }

		//("--" | "(0,1)") {Kardinalitaet01}
		public Group getGroup() { return cGroup; }

		//"--" | "(0,1)"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_0_0() { return cHyphenMinusHyphenMinusKeyword_0_0; }

		//"(0,1)"
		public Keyword getLeftParenthesisDigitZeroCommaDigitOneRightParenthesisKeyword_0_1() { return cLeftParenthesisDigitZeroCommaDigitOneRightParenthesisKeyword_0_1; }

		//{Kardinalitaet01}
		public Action getKardinalitaet01Action_1() { return cKardinalitaet01Action_1; }
	}

	public class Kardinalitaet0xElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kardinalitaet0x");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLeftParenthesisDigitZeroCommaAsteriskRightParenthesisKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Action cKardinalitaet0xAction_1 = (Action)cGroup.eContents().get(1);
		
		//Kardinalitaet0x:
		//
		//	("->" | "(0,*)") {Kardinalitaet0x};
		public ParserRule getRule() { return rule; }

		//("->" | "(0,*)") {Kardinalitaet0x}
		public Group getGroup() { return cGroup; }

		//"->" | "(0,*)"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_0() { return cHyphenMinusGreaterThanSignKeyword_0_0; }

		//"(0,*)"
		public Keyword getLeftParenthesisDigitZeroCommaAsteriskRightParenthesisKeyword_0_1() { return cLeftParenthesisDigitZeroCommaAsteriskRightParenthesisKeyword_0_1; }

		//{Kardinalitaet0x}
		public Action getKardinalitaet0xAction_1() { return cKardinalitaet0xAction_1; }
	}

	public class Kardinalitaet11Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kardinalitaet11");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLeftParenthesisDigitOneCommaDigitOneRightParenthesisKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Action cKardinalitaet11Action_1 = (Action)cGroup.eContents().get(1);
		
		//Kardinalitaet11:
		//
		//	("==" | "(1,1)") {Kardinalitaet11};
		public ParserRule getRule() { return rule; }

		//("==" | "(1,1)") {Kardinalitaet11}
		public Group getGroup() { return cGroup; }

		//"==" | "(1,1)"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0_0() { return cEqualsSignEqualsSignKeyword_0_0; }

		//"(1,1)"
		public Keyword getLeftParenthesisDigitOneCommaDigitOneRightParenthesisKeyword_0_1() { return cLeftParenthesisDigitOneCommaDigitOneRightParenthesisKeyword_0_1; }

		//{Kardinalitaet11}
		public Action getKardinalitaet11Action_1() { return cKardinalitaet11Action_1; }
	}

	public class Kardinalitaet1xElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kardinalitaet1x");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLeftParenthesisDigitOneCommaAsteriskRightParenthesisKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Action cKardinalitaet1xAction_1 = (Action)cGroup.eContents().get(1);
		
		//Kardinalitaet1x:
		//
		//	("=>" | "(1,*)") {Kardinalitaet1x};
		public ParserRule getRule() { return rule; }

		//("=>" | "(1,*)") {Kardinalitaet1x}
		public Group getGroup() { return cGroup; }

		//"=>" | "(1,*)"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_0_0() { return cEqualsSignGreaterThanSignKeyword_0_0; }

		//"(1,*)"
		public Keyword getLeftParenthesisDigitOneCommaAsteriskRightParenthesisKeyword_0_1() { return cLeftParenthesisDigitOneCommaAsteriskRightParenthesisKeyword_0_1; }

		//{Kardinalitaet1x}
		public Action getKardinalitaet1xAction_1() { return cKardinalitaet1xAction_1; }
	}
	
	
	private AwSElements pAwS;
	private SchemaElements pSchema;
	private VOSElements pVOS;
	private KOSElements pKOS;
	private ObjekttypElements pObjekttyp;
	private VOTElements pVOT;
	private KOTElements pKOT;
	private OOTElements pOOT;
	private LOTElements pLOT;
	private TOTElements pTOT;
	private AttributElements pAttribut;
	private OperatorElements pOperator;
	private BeziehungElements pBeziehung;
	private Interacts_withElements pInteracts_with;
	private Is_aElements pIs_a;
	private Is_part_ofElements pIs_part_of;
	private KardinalitaetElements pKardinalitaet;
	private Kardinalitaet01Elements pKardinalitaet01;
	private Kardinalitaet0xElements pKardinalitaet0x;
	private Kardinalitaet11Elements pKardinalitaet11;
	private Kardinalitaet1xElements pKardinalitaet1x;
	
	private final Grammar grammar;

	private AnnotationGrammarAccess gaAnnotation;

	@Inject
	public AwsGrammarAccess(GrammarProvider grammarProvider,
		AnnotationGrammarAccess gaAnnotation) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaAnnotation = gaAnnotation;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniba.wiai.seda.fha.som.aws.Aws".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public AnnotationGrammarAccess getAnnotationGrammarAccess() {
		return gaAnnotation;
	}

	
	//AwS:
	//
	//	"AwS:" name=ID ("v" version=VERSION_NUMBER)? (kos=KOS & vos=VOS);
	public AwSElements getAwSAccess() {
		return (pAwS != null) ? pAwS : (pAwS = new AwSElements());
	}
	
	public ParserRule getAwSRule() {
		return getAwSAccess().getRule();
	}

	//Schema:
	//
	//	VOS | KOS;
	public SchemaElements getSchemaAccess() {
		return (pSchema != null) ? pSchema : (pSchema = new SchemaElements());
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}

	//VOS:
	//
	//	(name="VOS" | name=ID) "{" (objekttypen+=VOT | beziehungen+=Interacts_with | gliederung+=VOS)+ "}";
	public VOSElements getVOSAccess() {
		return (pVOS != null) ? pVOS : (pVOS = new VOSElements());
	}
	
	public ParserRule getVOSRule() {
		return getVOSAccess().getRule();
	}

	//KOS:
	//
	//	(name="KOS" | name=ID) "{" (objekttypen+=KOT | beziehungen+=Beziehung | gliederung+=KOS)+ "}";
	public KOSElements getKOSAccess() {
		return (pKOS != null) ? pKOS : (pKOS = new KOSElements());
	}
	
	public ParserRule getKOSRule() {
		return getKOSAccess().getRule();
	}

	//Objekttyp:
	//
	//	VOT | KOT;
	public ObjekttypElements getObjekttypAccess() {
		return (pObjekttyp != null) ? pObjekttyp : (pObjekttyp = new ObjekttypElements());
	}
	
	public ParserRule getObjekttypRule() {
		return getObjekttypAccess().getRule();
	}

	//VOT:
	//
	//	annotation=Annotation? "VOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}";
	public VOTElements getVOTAccess() {
		return (pVOT != null) ? pVOT : (pVOT = new VOTElements());
	}
	
	public ParserRule getVOTRule() {
		return getVOTAccess().getRule();
	}

	//KOT:
	//
	//	OOT | LOT | TOT;
	public KOTElements getKOTAccess() {
		return (pKOT != null) ? pKOT : (pKOT = new KOTElements());
	}
	
	public ParserRule getKOTRule() {
		return getKOTAccess().getRule();
	}

	//OOT:
	//
	//	annotation=Annotation? "OOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}";
	public OOTElements getOOTAccess() {
		return (pOOT != null) ? pOOT : (pOOT = new OOTElements());
	}
	
	public ParserRule getOOTRule() {
		return getOOTAccess().getRule();
	}

	//LOT:
	//
	//	annotation=Annotation? "LOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}";
	public LOTElements getLOTAccess() {
		return (pLOT != null) ? pLOT : (pLOT = new LOTElements());
	}
	
	public ParserRule getLOTRule() {
		return getLOTAccess().getRule();
	}

	//TOT:
	//
	//	annotation=Annotation? "TOT" name=ID "{" (attribute+=Attribut | operatoren+=Operator)* "}";
	public TOTElements getTOTAccess() {
		return (pTOT != null) ? pTOT : (pTOT = new TOTElements());
	}
	
	public ParserRule getTOTRule() {
		return getTOTAccess().getRule();
	}

	//Attribut:
	//
	//	typ=[Objekttyp]? name=ID ";";
	public AttributElements getAttributAccess() {
		return (pAttribut != null) ? pAttribut : (pAttribut = new AttributElements());
	}
	
	public ParserRule getAttributRule() {
		return getAttributAccess().getRule();
	}

	//Operator:
	//
	//	name=ID "(" parameter+=[Objekttyp]* ")" ";";
	public OperatorElements getOperatorAccess() {
		return (pOperator != null) ? pOperator : (pOperator = new OperatorElements());
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//Beziehung:
	//
	//	Interacts_with | Is_a | Is_part_of;
	public BeziehungElements getBeziehungAccess() {
		return (pBeziehung != null) ? pBeziehung : (pBeziehung = new BeziehungElements());
	}
	
	public ParserRule getBeziehungRule() {
		return getBeziehungAccess().getRule();
	}

	//Interacts_with:
	//
	//	annotation=Annotation? "interacts_with:"? objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x |
	//
	//	Kardinalitaet1x) objekttyp2=[Objekttyp] ";";
	public Interacts_withElements getInteracts_withAccess() {
		return (pInteracts_with != null) ? pInteracts_with : (pInteracts_with = new Interacts_withElements());
	}
	
	public ParserRule getInteracts_withRule() {
		return getInteracts_withAccess().getRule();
	}

	//Is_a:
	//
	//	annotation=Annotation? "is_a:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet11)
	//
	//	objekttyp2=[Objekttyp] ";";
	public Is_aElements getIs_aAccess() {
		return (pIs_a != null) ? pIs_a : (pIs_a = new Is_aElements());
	}
	
	public ParserRule getIs_aRule() {
		return getIs_aAccess().getRule();
	}

	//Is_part_of:
	//
	//	annotation=Annotation? "is_part_of:" objekttyp1=[Objekttyp] kardinalitaet=(Kardinalitaet01 | Kardinalitaet0x |
	//
	//	Kardinalitaet1x) objekttyp2=[Objekttyp] ";";
	public Is_part_ofElements getIs_part_ofAccess() {
		return (pIs_part_of != null) ? pIs_part_of : (pIs_part_of = new Is_part_ofElements());
	}
	
	public ParserRule getIs_part_ofRule() {
		return getIs_part_ofAccess().getRule();
	}

	//Kardinalitaet:
	//
	//	Kardinalitaet01 | Kardinalitaet0x | Kardinalitaet11 | Kardinalitaet1x;
	public KardinalitaetElements getKardinalitaetAccess() {
		return (pKardinalitaet != null) ? pKardinalitaet : (pKardinalitaet = new KardinalitaetElements());
	}
	
	public ParserRule getKardinalitaetRule() {
		return getKardinalitaetAccess().getRule();
	}

	//Kardinalitaet01:
	//
	//	("--" | "(0,1)") {Kardinalitaet01};
	public Kardinalitaet01Elements getKardinalitaet01Access() {
		return (pKardinalitaet01 != null) ? pKardinalitaet01 : (pKardinalitaet01 = new Kardinalitaet01Elements());
	}
	
	public ParserRule getKardinalitaet01Rule() {
		return getKardinalitaet01Access().getRule();
	}

	//Kardinalitaet0x:
	//
	//	("->" | "(0,*)") {Kardinalitaet0x};
	public Kardinalitaet0xElements getKardinalitaet0xAccess() {
		return (pKardinalitaet0x != null) ? pKardinalitaet0x : (pKardinalitaet0x = new Kardinalitaet0xElements());
	}
	
	public ParserRule getKardinalitaet0xRule() {
		return getKardinalitaet0xAccess().getRule();
	}

	//Kardinalitaet11:
	//
	//	("==" | "(1,1)") {Kardinalitaet11};
	public Kardinalitaet11Elements getKardinalitaet11Access() {
		return (pKardinalitaet11 != null) ? pKardinalitaet11 : (pKardinalitaet11 = new Kardinalitaet11Elements());
	}
	
	public ParserRule getKardinalitaet11Rule() {
		return getKardinalitaet11Access().getRule();
	}

	//Kardinalitaet1x:
	//
	//	("=>" | "(1,*)") {Kardinalitaet1x};
	public Kardinalitaet1xElements getKardinalitaet1xAccess() {
		return (pKardinalitaet1x != null) ? pKardinalitaet1x : (pKardinalitaet1x = new Kardinalitaet1xElements());
	}
	
	public ParserRule getKardinalitaet1xRule() {
		return getKardinalitaet1xAccess().getRule();
	}

	//Annotation:
	//
	//	Name | Ignore | Merge | Version;
	public AnnotationGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotation.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//Name:
	//
	//	"@name" name=ID;
	public AnnotationGrammarAccess.NameElements getNameAccess() {
		return gaAnnotation.getNameAccess();
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//Merge:
	//
	//	"@merge" name=ID;
	public AnnotationGrammarAccess.MergeElements getMergeAccess() {
		return gaAnnotation.getMergeAccess();
	}
	
	public ParserRule getMergeRule() {
		return getMergeAccess().getRule();
	}

	//Ignore:
	//
	//	"@ignore" {Ignore};
	public AnnotationGrammarAccess.IgnoreElements getIgnoreAccess() {
		return gaAnnotation.getIgnoreAccess();
	}
	
	public ParserRule getIgnoreRule() {
		return getIgnoreAccess().getRule();
	}

	//Version:
	//
	//	"@version" version=VERSION_NUMBER;
	public AnnotationGrammarAccess.VersionElements getVersionAccess() {
		return gaAnnotation.getVersionAccess();
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_" | "<" | ">") ("a".."z" | "A".."Z" | "_" | "0".."9" | "<" | ">")*;
	public TerminalRule getIDRule() {
		return gaAnnotation.getIDRule();
	} 

	//terminal VERSION_NUMBER:
	//
	//	"0".."9"+ "." "0".."9"+;
	public TerminalRule getVERSION_NUMBERRule() {
		return gaAnnotation.getVERSION_NUMBERRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaAnnotation.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaAnnotation.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotation.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotation.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaAnnotation.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaAnnotation.getANY_OTHERRule();
	} 
}
