/**
 * generated by Xtext
 */
package de.uniba.wiai.seda.fha.som.aws.scoping;

import com.google.common.collect.Iterators;
import de.uniba.wiai.seda.fha.som.aws.aws.AwS;
import de.uniba.wiai.seda.fha.som.aws.aws.Objekttyp;
import java.util.Iterator;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class AwsScopeProvider extends AbstractDeclarativeScopeProvider {
  /**
   * sets global scope for Objekttyp
   */
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      EClassifier _eType = reference.getEType();
      String _name = _eType.getName();
      boolean _equals = _name.equals("Objekttyp");
      if (_equals) {
        return this.<Objekttyp>getGlobalScope(context, Objekttyp.class);
      }
      IScope _scope = super.getScope(context, reference);
      _xblockexpression = (_scope);
    }
    return _xblockexpression;
  }
  
  /**
   * returns the global scope for the given type
   */
  public <T extends EObject> IScope getGlobalScope(final EObject anyObject, final Class<T> typ) {
    EObject aws = anyObject;
    boolean _not = (!(aws instanceof AwS));
    boolean _while = _not;
    while (_while) {
      EObject _eContainer = aws.eContainer();
      aws = _eContainer;
      boolean _not_1 = (!(aws instanceof AwS));
      _while = _not_1;
    }
    TreeIterator<EObject> _eAllContents = aws.eAllContents();
    Iterator<T> _filter = Iterators.<T>filter(_eAllContents, typ);
    final Iterable<T> typs = IteratorExtensions.<T>toIterable(_filter);
    return Scopes.scopeFor(typs);
  }
}
